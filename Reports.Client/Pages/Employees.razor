@page "/employees"
@using Reports.Shared.DataTransferObjects
@using System.Text.Json
@using System.Text

@inject HttpClient HttpClient

<PageTitle>Employees</PageTitle>

<h3>Employees</h3>

<DataGrid TItem="EmployeeViewModel"
          Data="@_employees"
          ReadData="@OnReadData"
          TotalItems="@_totalEmployees"
          PageSize="3"
          ShowPager
          @bind-SelectedRow="_selectedEmployee"
          Responsive
          Hoverable
          Editable
          CommandMode="DataGridCommandMode.ButtonRow"
          EditMode="DataGridEditMode.Popup"
          RowRemoving="RemoveEmployee"
          RowUpdating="UpdateEmployee">
    <DataGridColumns>
        <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false">
            <SaveCommandTemplate>
                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="context.Clicked">@context.LocalizationString</Button>
            </SaveCommandTemplate>
            <CancelCommandTemplate>
                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
            </CancelCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn Field="@nameof(EmployeeViewModel.Id)" Caption="Id" Sortable="false"/>
        <DataGridColumn Field="@nameof(EmployeeViewModel.Username)" Caption="Username" Editable/>
        <DataGridColumn Field="@nameof(EmployeeViewModel.SupervisorId)" Caption="SupervisorId"/>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="ShowModal">New</Button>
        <Button Color="Color.Primary" Disabled="(_selectedEmployee is null)" Clicked="context.EditCommand.Clicked">Edit</Button>
        <Button Color="Color.Danger" Disabled="(_selectedEmployee is null)" Clicked="context.DeleteCommand.Clicked">Delete</Button>
    </ButtonRowTemplate>
</DataGrid>

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Employee edit</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Username</FieldLabel>
                <Validations @ref="addingEmployeeValidations">
                    <Validation Validator="ValidateUsername">
                        <TextEdit @bind-Text="addingEmployeeUsername" Placeholder="Enter username...">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Validations>
            </Field>
            <Field>
                <FieldLabel>Supervisor</FieldLabel>
                <Select @bind-SelectedValue="@addingEmployeeSupervisorId">
                    <SelectItem Value="0">Create a TeamLead</SelectItem>
                    @if (_employees is not null)
                    {
                        @foreach (var employee in _employees)
                        {
                            <SelectItem Value="employee.Id">@employee.Username (Id: @employee.Id)</SelectItem>
                        }
                    }
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Disabled="@(string.IsNullOrWhiteSpace(addingEmployeeUsername))" Color="Color.Primary" Clicked="@AddEmployee">Submit</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<EmployeeViewModel>? _employees;
    private EmployeeViewModel _selectedEmployee;
    private int _totalEmployees;

    private Modal modalRef;
    private string addingEmployeeUsername;
    private ulong? addingEmployeeSupervisorId;
    private Validations addingEmployeeValidations;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task AddEmployee()
    {
        if (await addingEmployeeValidations.ValidateAll())
        {
            var addEmployeeDto = new AddEmployeeDto(addingEmployeeUsername, addingEmployeeSupervisorId == 0 ? null : addingEmployeeSupervisorId);
            addingEmployeeUsername = string.Empty;
            addingEmployeeSupervisorId = 0;
            var response = await HttpClient.PostAsJsonAsync("api/employee", addEmployeeDto);
            if (response.IsSuccessStatusCode)
            {
                var addedEmployee = await response.Content.ReadFromJsonAsync<EmployeeViewModel>();
                _employees.Add(addedEmployee);
            }
            await HideModal();
        }
    }

    private void ValidateUsername(ValidatorEventArgs e)
    {
        var username = e.Value as string;

        if (string.IsNullOrWhiteSpace(username))
            e.Status = ValidationStatus.None;
        else if (username.Length is < 1 or > 20)
        {
            e.ErrorText = username.Length < 1 ? "Username should be >= 1 characters" : "Username should be <= 20 characters";
            e.Status = ValidationStatus.Error;
        }
    }

    private async Task OnReadData(DataGridReadDataEventArgs<EmployeeViewModel> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            var response = await HttpClient.GetAsync($"/api/employee?pageIndex={e.Page}&pageSize={e.PageSize}");
            if (response.IsSuccessStatusCode)
            {
                _totalEmployees = Convert.ToInt32(response.Headers.FirstOrDefault(h => h.Key == "rows-total-number").Value.FirstOrDefault());
                _employees = await response.Content.ReadFromJsonAsync<List<EmployeeViewModel>>();
            }
        }
    }

    private async Task RemoveEmployee(CancellableRowChange<EmployeeViewModel> obj)
    {
        var response = await HttpClient.DeleteAsync($"/api/employee/{obj.Item.Id}");
        if (!response.IsSuccessStatusCode)
        {
            obj.Cancel = true;
        }
    }

    private async Task UpdateEmployee(CancellableRowChange<EmployeeViewModel, Dictionary<string, object>> obj)
    {
        var usernameUpdated = obj.Values["Username"] as string ?? string.Empty;
        var updateEmployeeDto = new UpdateEmployeeDto(usernameUpdated, obj.Item.SupervisorId);
        var serializedDto = JsonSerializer.Serialize(updateEmployeeDto);
        var requestContent = new StringContent(serializedDto, Encoding.UTF8, "application/json-patch+json");
        var response = await HttpClient.PatchAsync($"/api/employee/{obj.Item.Id}", requestContent);
        if (!response.IsSuccessStatusCode)
        {
            obj.Cancel = true;
        }
    }

}